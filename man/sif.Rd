% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sif.R
\name{sif}
\alias{sif}
\alias{sifkw}
\alias{todos}
\title{Detect pattern across multiple files}
\usage{
sif(
  pattern,
  dir = ".",
  markers = interactive() && requireNamespace("rstudioapi", quietly = TRUE),
  fixed = FALSE,
  case_sensitive = TRUE,
  path_pattern = getOption("sifr.path_pattern"),
  path_case_sensitive = FALSE,
  recursive = TRUE,
  encoding = "unknown"
)

sifkw(
  keywords,
  dir = ".",
  markers = interactive() && requireNamespace("rstudioapi", quietly = TRUE),
  fixed = FALSE,
  case_sensitive = FALSE,
  path_pattern = getOption("sifr.path_pattern"),
  path_case_sensitive = FALSE,
  recursive = TRUE
)

todos(
  dir = ".",
  markers = interactive() && requireNamespace("rstudioapi", quietly = TRUE),
  fixed = FALSE,
  case_sensitive = TRUE,
  path_pattern = getOption("sifr.path_pattern"),
  path_case_sensitive = FALSE,
  recursive = TRUE,
  encoding = "unknown"
)
}
\arguments{
\item{pattern}{\code{character} scalar. A pattern for which to search in files.}

\item{dir}{\code{character} scalar. A file system path to the directory in which
files should be search.}

\item{markers}{\code{logical} scalar. Display results in the RStudio source
markers pane.}

\item{fixed}{\code{logical} scalar. If \code{FALSE} \code{pattern} is
interpreted as regular expression, else the string is matched as-is.}

\item{case_sensitive}{\code{logical} scalar. If \code{TRUE} \code{pattern} is matched
case sensitively.}

\item{path_pattern}{\code{character} scalar. A regular expression pattern to match
file paths against. Defaults to common source files for R
(\code{.R}, \code{.Rmd}, \code{Rnw}, \code{Rhtml}, \code{c}, \code{cpp}). Please note that \code{.Rd} files
are \emph{not} included by default. You can modify the default behavior by
setting the \code{\link[=option]{option()}} \code{sifr.path_pattern}.}

\item{path_case_sensitive}{\code{logical}. If \code{TRUE} \code{path_pattern} is matched
case sensitively.}

\item{recursive}{\code{logical} scalar. If \code{TRUE} files are searched recursively
starting from \code{dir}.}

\item{encoding}{passed on to \code{\link[base:readLines]{base::readLines()}}}

\item{keywords}{a \code{character} vector of keywords}
}
\value{
A \code{sif_result} or \code{sifkw_results} \code{data.table} with the columns:
\itemize{
\item \code{path} - path to the file,
\item \code{ln} - line number,
\item \code{pos} - a list column of numeric two-column \code{matrices} indicating start
and end of each match, see \code{\link[stringi:stri_locate]{stringi::stri_locate_all()}}
\item \code{contents} - the text contents of the line
}

The returned object may also contain the attributes \code{"pattern"}
(for \code{sif()}) or \code{"keywords"} (for \code{sifkw()}) that contain the original
search terms
}
\description{
\code{sif()} recursively searches all files inside a directory for a term
(usually a regex pattern). If used interactively from RStudio it defaults
to displaying the results in the Markers pane. This is very similar to
RStudios \emph{find in files} feature, but has the advantage that the search
results are also returned as a \code{data.frame} that can be further processed.
}
\examples{
 tf <- tempfile(fileext = ".csv")
 write.csv(iris, tf)

 x <- sif("5.5", dir = dirname(tf), markers = FALSE, path_pattern = ".*\\\\.csv$")

 print(x)
 as.data.frame(x)
 attr(x, "pattern")

 if (interactive() && requireNamespace("rstudioapi", quietly = TRUE)){
   print(x, markers = TRUE)
 }
 unlink(tf)  #cleanup
}
\seealso{
https://stackoverflow.com/a/7284583/2622641
}
